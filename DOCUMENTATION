I worked hard to make Myrtille as straightforward as possible, with commented code, but some points may needs additional information.
I apologize not providing an extensive documentation, diagrams, industry grade architecture models, mockups and unit tests; I wanted to keep things as simple as possible (but I don't exclude doing it in a future release).
If you have any issue, question or suggestion that isn't addressed into this synthetic documentation, FAQ or Wiki, please don't hesitate to contact me (mailto:cedrozor@gmail.com) or ask the community (https://groups.google.com/forum/#!forum/myrtille_rdp).

Overview

	web browser <-> web gateway <-> wcf services <-> rdp client <-> rdp server

Code organization

	- Myrtille.RDP: C++ code. FreeRDP rdp client; modified to forward the user input(s) and encode the session display into the configured image format(s). The modified code in FreeRDP is identified by region tags "#pragma region Myrtille" and "#pragma endregion".
	- Myrtille.Common: C# code. Fleck Websockets library and common helpers.
	- Myrtille.Services: C# code. WCF services, hosted by a Windows Service (or a console application in debug build). start/stop the rdp client and upload/download file(s) to/from the connected user documents folder.
	- Myrtille.Services.Contracts: C# code. WCF contracts (interfaces).
	- Myrtille.Web: C# code. Link between the browser and the rdp client; maintain correlation between http and rdp sessions.
	- Myrtille.Setup: MSI installer.

Communication

	web browser <-HTTP(S),XMLHTTP,WS(S)-> web gateway <-WCF-> wcf services <-SYSTEM-> rdp client <-RDP-> rdp server

	"SYSTEM" is simply starting FreeRDP as a local process, and capture the event of it being stopped.

	In order to speed up the communication between the web gateway and the rdp client, I decided to bypass the wcf services layer and set a direct communication between the two by using named pipes.
	It has 2 advantages: first, it's a bit faster than using TCP and, second, it guarantees a FIFO unstacking to preserve the images order.	It has also a drawback: both the web gateway and the wcf services must be on the same machine.
	After weighing pros and cons, I decided to kept it as is because it also has 2 additional benefits: setting up a named pipe in C++ is a bit simpler than a TCP socket (named pipes are handled as simple files) and having a single setup is easier for the end user.
		
	web gateway <-IPC-> rdp client
	
	However, I'm fully aware that it breaks the distributed architecture pattern. Thus, if you want, feel free to move the named pipes management up to the wcf services layer and proxy the data from/to the web gateway.
	This is a thing to consider if you want to isolate the web gateway from your intranet (into a DMZ for instance) and still be able to connect a machine on it.

Troubleshoot

	First at all, ensure the Myrtille prerequisites are met (see README, "Installation" part).

	- The installation fails
		- Check the Windows events logs ("System", "Application", etc.).
		
	- I can't access http://yourserver/myrtille
		- Ensure IIS is started and "Myrtille.Web" application is running on the "MyrtilleAppPool" application pool.
		- Ensure .NET 4.0 is installed and the "MyrtilleAppPool" is running on it.
		- If using HTTPS, ensure a valid SSL certificate is installed on IIS and exported as .PFX into Myrtille "ssl" folder (more details in README, "Security" part).

	- Nothing happens when I click "Connect!"
		- Ensure you entered valid connection information (server address, user credentials, etc.).
		- Ensure the network traffic (websockets and xmlhttp in particular) is not blocked by a firewall, proxy, reverse proxy, VPN or whatever.
		- Ensure IIS is started and "Myrtille.Web" application is running on the "MyrtilleAppPool" application pool.
		- Ensure .NET 4.0 is installed and the "MyrtilleAppPool" is running on it.
		- If using HTTPS with HTML5 rendering (hence secure websockets, WSS), ensure the TCP port 8431 is opened (more details in README, "Security" part).
		- Ensure the "Myrtille.Services" Windows service is started.
		- Ensure the Microsoft Visual C++ 2015 redistributables are installed (and also Microsoft Visual C++ 2008 redistributables if on Windows Server 2008); they are required by FreeRDP.
		- Check the RDP server configuration (does the user exists, is it a member of the "Remote Desktop Users" group, are Remote Desktop CALs valid?, etc.).
		- Check the RDP server logs (and also the Windows events logs on the RDP server machine).
		- Check the Windows events logs ("System", "Application", etc.), particulary regarding .NET.
		- Retry with Myrtille logs enabled and check them (Myrtille "log" folder). You can change their verbosity level in config (but be warned it will affect peformance and flood the disk if setted too verbose).

	- The RDP session continues to run after clicking "Disconnect"
		- Check the RDP server configuration (session disconnect timeout in particular). You can setup it automatically by importing the Myrtille "RDPSetup.reg" file into registry.

	- Myrtille is slow or buggy
		- Enable the stats bar to have detailed information about the current connection. Check latency and bandwith, among other things.
		- Ensure debug is disabled or otherwise logs are not set to "Information" level (Myrtille "Web.Config" file, "<system.diagnostics>" section, default is "Warning"). Check logs, if debug is enabled.
		- If debug is enabled and you are running Myrtille in debug mode under Visual Studio, you will have the FreeRDP window (session display) and console (rdp events) shown to you. It may help to debug.
		- Switch from HTML4 to HTML5 rendering, or inversely (should be faster with HTML5).
		- Check your network configuration (is something filtering the traffic?) and capabilities (high latency or small bandwith?).
		- Maybe the default settings are not adapted to your configuration. You can tweak the "js/config.js" file as you wish (see extensive comments there).
		- Despite my best efforts to produce quality and efficient code, I may have missed/messed something... Please don't hesitate to tell me or add your contribution! Thanks! :)